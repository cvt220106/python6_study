'''集合的创建'''
#利用{}直接创建
s1={10,20,30,40,30,40,30,50,50}#集合就像是只有key的字典,内部是无序的,且不存在重复的元素 
print(s1)
#利用set()函数创建
s2=set((10,10,20,20,30,50))
print(s2)
#利用集合表达式创建,格式同列表表达式,只需将[]改为{}
s3={i**3 for i in range(1,10)}
print(s3)
#集合的存在性查询
print(1 in s3)
print(1 not in s3)
'''集合的增加'''
#add()增加一个元素
s1.add(80)
print(s1)
#update()增加多个元素
#()可以是集合,列表,元祖
s1.update({1,2,3})#括号内为集合
print(s1)
s1.update([4,5,6])#括号内为列表
print(s1)
s1.update((7,8,9))#括号内为元祖
print(s1)
'''集合的删除'''
#remove()函数去除一个指定元素,但不能是集合内不存在的元素
s1.remove(80)
print(s1)
#discard()函数去除一个指定元素,若元素不存在与集合内,不会报错
s1.discard(1)
print(s1)
s1.discard(100)#100不存在于s1内,但并未报错
print(s1)
#pop()函数随机弹出删除一个元素
s1.pop()
print(s1)
s1.pop()
print(s1)
#clear()函数清空整个集合
s1.clear()
print(s1)
'''集合的遍历'''
for item in s1:
    print(item)

''''集合之间的关系'''
demo={10,20}
demo1={10,20,30,40}
demo2={30,40,50,60}
#==与!=判断两个集合是否相同
print(demo1==demo2)#False
print(demo1!=demo2)#True
#利用issubset()函数判断是否为子集
print(demo.issubset(demo1))#True
print(demo.issubset(demo2))#False
#利用issuperset()函数判断是否为超集
'''A是B的子集,则B是A的超集'''
print(demo1.issuperset(demo))#True
print(demo2.issuperset(demo))#False
#利用isdisjoint判断两个集合是否没有交集
print(demo.isdisjoint(demo1))#False--即有交集
print(demo.isdisjoint(demo2))#True--即没有交集

''''集合之间的操作--交并差'''
demo1={10,20,30,40}
demo2={30,40,50,60}
print(demo1.intersection(demo2))#交集，效果同&
print(demo1&demo2)
print(demo1.union(demo2))#并集，效果同|
print(demo1|demo2)
print(demo1.difference(demo2))#差集，效果同-
print(demo1-demo2)
print(demo1.symmetric_difference(demo2))#对称差集(demo1|demo2)-(demo1&demo2)
print((demo1|demo2)-(demo1&demo2))
print((demo1-demo2)|(demo2-demo1))#三者等价
